{"ast":null,"code":"var _jsxFileName = \"D:\\\\Learn_the_MERN_Stack\\\\mern_shopping_list\\\\client\\\\src\\\\components\\\\auth\\\\RegisterModal.js\";\nimport React, { Component } from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, Form, FormGroup, Label, Input, NavLink, Alert } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { register } from '../../actions/authActions';\nimport { clearErrors } from '../../actions/errorActions';\n\nclass RegisterModal extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      modal: false,\n      name: '',\n      email: '',\n      password: '',\n      msg: null // I wanna be able to show msg if we have an error\n\n    };\n\n    this.toggle = () => {\n      //Clear erros\n      this.props.clearErrors();\n      this.setState({\n        modal: !this.state.modal\n      });\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault(); //Deconstructring\n\n      const {\n        name,\n        email,\n        password\n      } = this.state; //Creating a user object\n\n      const newUser = {\n        name,\n        email,\n        password\n      }; //calling the register action Attempt to register\n\n      this.props.register(newUser); // Close Modal\n      //We wanna close the modal if everything is ok \n      //we don't wanna close the modal if there's an error i wanna display the error to the user\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      error\n    } = this.props;\n\n    if (error !== prevProps.error) {\n      //here we will check to see if anything's\n      //check for register error\n      //this is where the id comes in this is why we add id in certain error\n      if (error.id === 'REGISTER_FAIL') {\n        //then we know that we wanna output that error\n        this.setState({\n          //3ana our msg value\n          msg: error.msg.msg //if this msg has something in it then we wanna output it in a alert\n\n        });\n      } else {\n        this.setState({\n          msg: null\n        });\n      }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(NavLink, {\n      onClick: this.toggle,\n      href: \"#\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }\n    }, \"Register\"), /*#__PURE__*/React.createElement(Modal, {\n      isOpen: this.state.modal,\n      toggle: this.toggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ModalHeader, {\n      toggle: this.toggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 21\n      }\n    }, \"Register\"), /*#__PURE__*/React.createElement(ModalBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 21\n      }\n    }, this.state.msg ? /*#__PURE__*/React.createElement(Alert, {\n      color: \"danger\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 43\n      }\n    }, this.state.msg) : null, /*#__PURE__*/React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      for: \"name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 33\n      }\n    }, \"Name\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"text\",\n      name: \"name\",\n      id: \"name\",\n      placeholder: \"Name\",\n      className: \"mb-3\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(Label, {\n      for: \"email\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 33\n      }\n    }, \"Email\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"email\",\n      name: \"email\",\n      id: \"email\",\n      placeholder: \"Email\",\n      className: \"mb-3\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(Label, {\n      for: \"password\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 33\n      }\n    }, \"Password\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"password\",\n      name: \"password\",\n      id: \"password\",\n      placeholder: \"Password\",\n      className: \"mb-3\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      color: \"dark\",\n      style: {\n        marginTop: '2rem'\n      },\n      block: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 33\n      }\n    }, \"Register\"))))));\n  }\n\n}\n\nRegisterModal.propTypes = {\n  isAuthenticated: PropTypes.bool,\n  //we are not going to do required bcz could be null\n  error: PropTypes.object.isRequired,\n  register: PropTypes.func.isRequired,\n  clearErrors: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => {\n  return {\n    isAuthenticated: state.auth.isAuthenticated,\n    //W need to bring the value of isAuthenticated because we want to close the modal once we register we want to close it if we're authenticated\n    error: state.error\n  };\n};\n\nexport default connect(mapStateToProps, {\n  register,\n  clearErrors\n})(RegisterModal);","map":{"version":3,"sources":["D:/Learn_the_MERN_Stack/mern_shopping_list/client/src/components/auth/RegisterModal.js"],"names":["React","Component","Button","Modal","ModalHeader","ModalBody","Form","FormGroup","Label","Input","NavLink","Alert","connect","PropTypes","register","clearErrors","RegisterModal","state","modal","name","email","password","msg","toggle","props","setState","handleChange","e","target","value","handleSubmit","preventDefault","newUser","componentDidUpdate","prevProps","error","id","render","marginTop","propTypes","isAuthenticated","bool","object","isRequired","func","mapStateToProps","auth"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    Form,\r\n    FormGroup,\r\n    Label,\r\n    Input,\r\n    NavLink,\r\n    Alert\r\n} from 'reactstrap';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { register } from '../../actions/authActions';\r\nimport { clearErrors } from '../../actions/errorActions';\r\n\r\nclass RegisterModal extends Component {\r\n    state = {\r\n        modal: false,\r\n        name: '',\r\n        email: '',\r\n        password: '',\r\n        msg: null // I wanna be able to show msg if we have an error\r\n    }\r\n\r\n    static propTypes = {\r\n        isAuthenticated: PropTypes.bool, //we are not going to do required bcz could be null\r\n        error: PropTypes.object.isRequired,\r\n        register: PropTypes.func.isRequired,\r\n        clearErrors: PropTypes.func.isRequired\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        const { error } = this.props;\r\n        if (error !== prevProps.error) { //here we will check to see if anything's\r\n            //check for register error\r\n            //this is where the id comes in this is why we add id in certain error\r\n            if (error.id === 'REGISTER_FAIL') {\r\n                //then we know that we wanna output that error\r\n                this.setState({ //3ana our msg value\r\n                    msg: error.msg.msg //if this msg has something in it then we wanna output it in a alert\r\n                });\r\n            }else {\r\n                this.setState({\r\n                    msg: null\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    toggle = () => {\r\n        //Clear erros\r\n        this.props.clearErrors();\r\n        this.setState({ modal: !this.state.modal });\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        //Deconstructring\r\n        const { name, email, password } = this.state;\r\n\r\n        //Creating a user object\r\n        const newUser = {\r\n            name,\r\n            email,\r\n            password\r\n        };\r\n\r\n        //calling the register action Attempt to register\r\n        this.props.register(newUser);\r\n\r\n        // Close Modal\r\n        //We wanna close the modal if everything is ok \r\n        //we don't wanna close the modal if there's an error i wanna display the error to the user\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <NavLink onClick={this.toggle} href=\"#\">Register</NavLink>\r\n\r\n                <Modal\r\n                    isOpen={this.state.modal}\r\n                    toggle={this.toggle}\r\n                >\r\n\r\n                    <ModalHeader toggle={this.toggle}>\r\n                        Register\r\n                    </ModalHeader>\r\n\r\n                    <ModalBody>\r\n                    { (this.state.msg) ? (<Alert color=\"danger\">{ this.state.msg }</Alert>) : (null) }\r\n                        <Form onSubmit={this.handleSubmit}>\r\n                            <FormGroup>\r\n                                <Label for=\"name\">Name</Label>\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    name=\"name\"\r\n                                    id=\"name\"\r\n                                    placeholder=\"Name\"\r\n                                    className=\"mb-3\"\r\n                                    onChange={this.handleChange}\r\n                                />\r\n\r\n\r\n                                <Label for=\"email\">Email</Label>\r\n                                <Input\r\n                                    type=\"email\"\r\n                                    name=\"email\"\r\n                                    id=\"email\"\r\n                                    placeholder=\"Email\"\r\n                                    className=\"mb-3\"\r\n                                    onChange={this.handleChange}\r\n                                />\r\n\r\n\r\n                                <Label for=\"password\">Password</Label>\r\n                                <Input\r\n                                    type=\"password\"\r\n                                    name=\"password\"\r\n                                    id=\"password\"\r\n                                    placeholder=\"Password\"\r\n                                    className=\"mb-3\"\r\n                                    onChange={this.handleChange}\r\n                                />\r\n                                <Button\r\n                                    color=\"dark\"\r\n                                    style={{ marginTop: '2rem' }}\r\n                                    block\r\n                                >\r\n                                    Register\r\n                                </Button>\r\n                            </FormGroup>\r\n                        </Form>\r\n                    </ModalBody>\r\n\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isAuthenticated: state.auth.isAuthenticated, //W need to bring the value of isAuthenticated because we want to close the modal once we register we want to close it if we're authenticated\r\n        error: state.error\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { register, clearErrors })(RegisterModal);"]},"metadata":{},"sourceType":"module"}