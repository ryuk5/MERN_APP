{"ast":null,"code":"//1-Importing the types\nimport { GET_ERRORS, CLEAR_ERRORS } from '../actions/types'; //2-Creating our initialState\n\nconst initialState = {\n  msg: null,\n  //\"él msg attr. comes from the server\"\n  status: null,\n  //that comes from the server par défaut yé5ou null\n  id: null //if we wanna to grab a certain error and do something within the component\n\n}; //3-exporting the reducer\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case GET_ERRORS:\n      return {\n        //returning an object\n        msg: action.payload.msg,\n        //comes from the server\n        status: action.payload.status,\n        id: action.payload.id //not all errors have id sa3at 7achétna énna we target specidic error to do something within the component\n\n      };\n\n    case CLEAR_ERRORS:\n      return {\n        //we will set everything back to  default\n        msg: {},\n        status: null,\n        id: null //==>we don't want the old errors hanging arround in our state\n\n      };\n\n    default:\n      //just returning the state\n      return state;\n  }\n}","map":{"version":3,"sources":["D:/Learn_the_MERN_Stack/mern_shopping_list/client/src/reducers/errorReducer.js"],"names":["GET_ERRORS","CLEAR_ERRORS","initialState","msg","status","id","state","action","type","payload"],"mappings":"AAAA;AACA,SAASA,UAAT,EAAqBC,YAArB,QAAyC,kBAAzC,C,CAEA;;AACA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,GAAG,EAAE,IADY;AACN;AACXC,EAAAA,MAAM,EAAE,IAFS;AAEH;AACdC,EAAAA,EAAE,EAAE,IAHa,CAGR;;AAHQ,CAArB,C,CAMA;;AACA,eAAe,UAAUC,KAAK,GAAGJ,YAAlB,EAAgCK,MAAhC,EAAwC;AACnD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKR,UAAL;AACI,aAAO;AAAE;AACLG,QAAAA,GAAG,EAAEI,MAAM,CAACE,OAAP,CAAeN,GADjB;AACsB;AACzBC,QAAAA,MAAM,EAAEG,MAAM,CAACE,OAAP,CAAeL,MAFpB;AAGHC,QAAAA,EAAE,EAAEE,MAAM,CAACE,OAAP,CAAeJ,EAHhB,CAGmB;;AAHnB,OAAP;;AAMJ,SAAKJ,YAAL;AACI,aAAO;AACH;AACAE,QAAAA,GAAG,EAAE,EAFF;AAGHC,QAAAA,MAAM,EAAE,IAHL;AAIHC,QAAAA,EAAE,EAAE,IAJD,CAKH;;AALG,OAAP;;AAQJ;AAAS;AACL,aAAOC,KAAP;AAlBR;AAoBH","sourcesContent":["//1-Importing the types\r\nimport { GET_ERRORS, CLEAR_ERRORS } from '../actions/types';\r\n\r\n//2-Creating our initialState\r\nconst initialState = {\r\n    msg: null, //\"él msg attr. comes from the server\"\r\n    status: null, //that comes from the server par défaut yé5ou null\r\n    id: null //if we wanna to grab a certain error and do something within the component\r\n}\r\n\r\n//3-exporting the reducer\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_ERRORS:\r\n            return { //returning an object\r\n                msg: action.payload.msg, //comes from the server\r\n                status: action.payload.status,\r\n                id: action.payload.id //not all errors have id sa3at 7achétna énna we target specidic error to do something within the component\r\n            };\r\n\r\n        case CLEAR_ERRORS:\r\n            return {\r\n                //we will set everything back to  default\r\n                msg: {},\r\n                status: null,\r\n                id: null\r\n                //==>we don't want the old errors hanging arround in our state\r\n            };\r\n\r\n        default: //just returning the state\r\n            return state;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}