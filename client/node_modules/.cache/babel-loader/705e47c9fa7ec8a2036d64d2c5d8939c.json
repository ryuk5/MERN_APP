{"ast":null,"code":"var _jsxFileName = \"D:\\\\Learn_the_MERN_Stack\\\\mern_shopping_list\\\\client\\\\src\\\\components\\\\auth\\\\LoginModal.js\";\nimport React, { Component } from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, Form, FormGroup, Label, Input, NavLink, Alert } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { login } from '../../actions/authActions';\nimport { clearErrors } from '../../actions/errorActions';\n\nclass LoginModal extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      modal: false,\n      email: '',\n      password: '',\n      msg: null // I wanna be able to show msg if we have an error\n\n    };\n\n    this.toggle = () => {\n      //Clear erros\n      this.props.clearErrors();\n      this.setState({\n        modal: !this.state.modal\n      });\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      const {\n        email,\n        password\n      } = this.state;\n      const user = {\n        //this is the user object to submit to the action éli él action bch tchouf él BD wéli mba3d ya él action bta3 success se déclenhe ou él action bta3 él error\n        email,\n        password\n      }; //Calling the login func. Attempt to login\n\n      this.props.login(user);\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      error,\n      isAuthenticated\n    } = this.props;\n\n    if (error !== prevProps.error) {\n      //here we will check to see if anything's\n      //check for register error\n      //this is where the id comes in this is why we add id in certain error\n      if (error.id === 'LOGIN_FAIL') {\n        //then we know that we wanna output that error\n        this.setState({\n          //3ana our msg value\n          msg: error.msg.msg //if this msg has something in it then we wanna output it in a alert\n\n        });\n      } else {\n        this.setState({\n          msg: null\n        });\n      }\n    } //If authenticated close modal\n\n\n    if (this.state.modal) {\n      //means that the modal is open\n      //we also need to be sure that we are authenticated\n      if (isAuthenticated) {\n        //Remauque: the value of isAuthenticated is in the props 5ater jébénha fél mapStateToProps\n        this.toggle(); //this will close the modal\n      }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(NavLink, {\n      onClick: this.toggle,\n      href: \"#\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }\n    }, \"Login\"), /*#__PURE__*/React.createElement(Modal, {\n      isOpen: this.state.modal,\n      toggle: this.toggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ModalHeader, {\n      toggle: this.toggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 21\n      }\n    }, \"Login\"), /*#__PURE__*/React.createElement(ModalBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 21\n      }\n    }, this.state.msg ? /*#__PURE__*/React.createElement(Alert, {\n      color: \"danger\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 44\n      }\n    }, this.state.msg) : null, /*#__PURE__*/React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      for: \"email\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 33\n      }\n    }, \"Email\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"email\",\n      name: \"email\",\n      id: \"email\",\n      placeholder: \"Email\",\n      className: \"mb-3\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(Label, {\n      for: \"password\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 33\n      }\n    }, \"Password\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"password\",\n      name: \"password\",\n      id: \"password\",\n      placeholder: \"Password\",\n      className: \"mb-3\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      color: \"dark\",\n      style: {\n        marginTop: '2rem'\n      },\n      block: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 33\n      }\n    }, \"Login\"))))));\n  }\n\n}\n\nLoginModal.propTypes = {\n  isAuthenticated: PropTypes.bool,\n  //we are not going to do required bcz could be null\n  error: PropTypes.object.isRequired,\n  login: PropTypes.func.isRequired,\n  clearErrors: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => {\n  return {\n    isAuthenticated: state.auth.isAuthenticated,\n    //W need to bring the value of isAuthenticated because we want to close the modal once we register we want to close it if we're authenticated\n    error: state.error\n  };\n};\n\nexport default connect(mapStateToProps, {\n  login,\n  clearErrors\n})(LoginModal);","map":{"version":3,"sources":["D:/Learn_the_MERN_Stack/mern_shopping_list/client/src/components/auth/LoginModal.js"],"names":["React","Component","Button","Modal","ModalHeader","ModalBody","Form","FormGroup","Label","Input","NavLink","Alert","connect","PropTypes","login","clearErrors","LoginModal","state","modal","email","password","msg","toggle","props","setState","handleChange","e","target","name","value","handleSubmit","preventDefault","user","componentDidUpdate","prevProps","error","isAuthenticated","id","render","marginTop","propTypes","bool","object","isRequired","func","mapStateToProps","auth"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    Form,\r\n    FormGroup,\r\n    Label,\r\n    Input,\r\n    NavLink,\r\n    Alert\r\n} from 'reactstrap';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { login } from '../../actions/authActions';\r\nimport { clearErrors } from '../../actions/errorActions';\r\n\r\nclass LoginModal extends Component {\r\n    state = {\r\n        modal: false,\r\n        email: '',\r\n        password: '',\r\n        msg: null // I wanna be able to show msg if we have an error\r\n    };\r\n\r\n    static propTypes = {\r\n        isAuthenticated: PropTypes.bool, //we are not going to do required bcz could be null\r\n        error: PropTypes.object.isRequired,\r\n        login: PropTypes.func.isRequired,\r\n        clearErrors: PropTypes.func.isRequired\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        const { error, isAuthenticated } = this.props;\r\n        if (error !== prevProps.error) { //here we will check to see if anything's\r\n            //check for register error\r\n            //this is where the id comes in this is why we add id in certain error\r\n            if (error.id === 'LOGIN_FAIL') {\r\n                //then we know that we wanna output that error\r\n                this.setState({ //3ana our msg value\r\n                    msg: error.msg.msg //if this msg has something in it then we wanna output it in a alert\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    msg: null\r\n                });\r\n            }\r\n        }\r\n\r\n\r\n        //If authenticated close modal\r\n        if (this.state.modal) { //means that the modal is open\r\n            //we also need to be sure that we are authenticated\r\n            if (isAuthenticated) { //Remauque: the value of isAuthenticated is in the props 5ater jébénha fél mapStateToProps\r\n                this.toggle(); //this will close the modal\r\n            }\r\n        }\r\n    }\r\n\r\n    toggle = () => {\r\n        //Clear erros\r\n        this.props.clearErrors();\r\n        this.setState({ modal: !this.state.modal });\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        const { email, password } = this.state;\r\n        const user = { //this is the user object to submit to the action éli él action bch tchouf él BD wéli mba3d ya él action bta3 success se déclenhe ou él action bta3 él error\r\n            email,\r\n            password\r\n        }\r\n\r\n        //Calling the login func. Attempt to login\r\n        this.props.login(user);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <NavLink onClick={this.toggle} href=\"#\">Login</NavLink>\r\n\r\n                <Modal\r\n                    isOpen={this.state.modal}\r\n                    toggle={this.toggle}\r\n                >\r\n\r\n                    <ModalHeader toggle={this.toggle}>\r\n                        Login\r\n                    </ModalHeader>\r\n\r\n                    <ModalBody>\r\n                        { this.state.msg ? <Alert color=\"danger\">{this.state.msg}</Alert> : null }\r\n                        <Form onSubmit={this.handleSubmit}>\r\n                            <FormGroup>\r\n                            \r\n                                <Label for=\"email\">Email</Label>\r\n                                <Input\r\n                                    type=\"email\"\r\n                                    name=\"email\"\r\n                                    id=\"email\"\r\n                                    placeholder=\"Email\"\r\n                                    className=\"mb-3\"\r\n                                    onChange={this.handleChange}\r\n                                />\r\n\r\n\r\n                                <Label for=\"password\">Password</Label>\r\n                                <Input\r\n                                    type=\"password\"\r\n                                    name=\"password\"\r\n                                    id=\"password\"\r\n                                    placeholder=\"Password\"\r\n                                    className=\"mb-3\"\r\n                                    onChange={this.handleChange}\r\n                                />\r\n                                <Button\r\n                                    color=\"dark\"\r\n                                    style={{ marginTop: '2rem' }}\r\n                                    block\r\n                                >\r\n                                    Login\r\n                                </Button>\r\n                            </FormGroup>\r\n                        </Form>\r\n                    </ModalBody>\r\n\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isAuthenticated: state.auth.isAuthenticated, //W need to bring the value of isAuthenticated because we want to close the modal once we register we want to close it if we're authenticated\r\n        error: state.error\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { login, clearErrors })(LoginModal);"]},"metadata":{},"sourceType":"module"}