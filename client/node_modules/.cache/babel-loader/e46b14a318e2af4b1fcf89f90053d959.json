{"ast":null,"code":"import { USER_LOADING, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS, REGISTER_SUCCESS, REGISTER_FAIL } from '../actions/types';\nconst initialState = {\n  token: localStorage.getItem('toekn'),\n  //we will get the token from local Storage if there is one set\n  isAuthenticated: null,\n  isLoading: false,\n  //if the user is loading\n  user: null //the user itself\n\n};\nexport default function (state = initialState, action) {\n  //we will evaluate the action type\n  switch (action.type) {\n    case USER_LOADING:\n      /** The USER_LOADING is just the point from where \r\n        *we're trying to get the user from the backend \r\n        *to the point to where we actually fetch the user\r\n        */\n      return { ...state,\n        isLoading: true\n      };\n\n    case USER_LOADED:\n      //once the user is loaded , this USER_LOADED is gonna run basically all the time with every req. to see if we're logged in or not !!!!!!!\n      //inajém iétna7a él token so lézém dima we check if we're logged in or not\n      return { ...state,\n        isAuthenticated: true,\n        //we were validate it on the back end and we got the user\n        isLoading: false,\n        user: action.payload //we will send the user as the payload\n\n      };\n\n    case LOGIN_SUCCESS: //bél nesba lél LOGIN_SUCCESS && REGISTER_SUCCESS we will do the same thing\n\n    case REGISTER_SUCCESS:\n      localStorage.setItem('token', action.payload.token);\n      return { ...state,\n        ...action.payload,\n        //this is what we're sneding from the backend an object wich contains the user éli houa object and the token\n        isAuthenticated: true,\n        //we were validate it on the back end and we got the user\n        isLoading: false\n      };\n\n    case AUTH_ERROR:\n    case LOGIN_FAIL:\n    case LOGOUT_SUCCESS:\n    case REGISTER_FAIL:\n      localStorage.removeItem('token'); //ina7i él token mél local storage\n\n      return { ...state,\n        token: null,\n        //setting the state\n        user: null,\n        isAuthenticated: false,\n        isLoading: false\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["D:/Learn_the_MERN_Stack/mern_shopping_list/client/src/reducers/authReducer.js"],"names":["USER_LOADING","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","REGISTER_SUCCESS","REGISTER_FAIL","initialState","token","localStorage","getItem","isAuthenticated","isLoading","user","state","action","type","payload","setItem","removeItem"],"mappings":"AAAA,SACIA,YADJ,EAEIC,WAFJ,EAGIC,UAHJ,EAIIC,aAJJ,EAKIC,UALJ,EAMIC,cANJ,EAOIC,gBAPJ,EAQIC,aARJ,QASO,kBATP;AAWA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAEC,YAAY,CAACC,OAAb,CAAqB,OAArB,CADU;AACqB;AACtCC,EAAAA,eAAe,EAAE,IAFA;AAGjBC,EAAAA,SAAS,EAAE,KAHM;AAGC;AAClBC,EAAAA,IAAI,EAAE,IAJW,CAIN;;AAJM,CAArB;AAOA,eAAe,UAAUC,KAAK,GAAGP,YAAlB,EAAgCQ,MAAhC,EAAwC;AACnD;AACA,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKjB,YAAL;AAAmB;;;;AAIf,aAAO,EACH,GAAGe,KADA;AAEHF,QAAAA,SAAS,EAAE;AAFR,OAAP;;AAKJ,SAAKZ,WAAL;AAAkB;AACd;AACA,aAAO,EACH,GAAGc,KADA;AAEHH,QAAAA,eAAe,EAAE,IAFd;AAEoB;AACvBC,QAAAA,SAAS,EAAE,KAHR;AAIHC,QAAAA,IAAI,EAAEE,MAAM,CAACE,OAJV,CAIkB;;AAJlB,OAAP;;AAOJ,SAAKf,aAAL,CAnBJ,CAmBwB;;AACpB,SAAKG,gBAAL;AACII,MAAAA,YAAY,CAACS,OAAb,CAAqB,OAArB,EAA8BH,MAAM,CAACE,OAAP,CAAeT,KAA7C;AACA,aAAO,EACH,GAAGM,KADA;AAEH,WAAGC,MAAM,CAACE,OAFP;AAEgB;AACnBN,QAAAA,eAAe,EAAE,IAHd;AAGoB;AACvBC,QAAAA,SAAS,EAAE;AAJR,OAAP;;AAOJ,SAAKX,UAAL;AACA,SAAKE,UAAL;AACA,SAAKC,cAAL;AACA,SAAKE,aAAL;AACIG,MAAAA,YAAY,CAACU,UAAb,CAAwB,OAAxB,EADJ,CACsC;;AAClC,aAAO,EACH,GAAGL,KADA;AAEHN,QAAAA,KAAK,EAAE,IAFJ;AAEU;AACbK,QAAAA,IAAI,EAAE,IAHH;AAIHF,QAAAA,eAAe,EAAE,KAJd;AAKHC,QAAAA,SAAS,EAAE;AALR,OAAP;;AAQJ;AACI,aAAOE,KAAP;AA3CR;AA6CH","sourcesContent":["import {\r\n    USER_LOADING,\r\n    USER_LOADED,\r\n    AUTH_ERROR,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGOUT_SUCCESS,\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FAIL\r\n} from '../actions/types';\r\n\r\nconst initialState = {\r\n    token: localStorage.getItem('toekn'), //we will get the token from local Storage if there is one set\r\n    isAuthenticated: null,\r\n    isLoading: false, //if the user is loading\r\n    user: null //the user itself\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n    //we will evaluate the action type\r\n    switch (action.type) {\r\n        case USER_LOADING: /** The USER_LOADING is just the point from where \r\n                             *we're trying to get the user from the backend \r\n                             *to the point to where we actually fetch the user\r\n                             */\r\n            return {\r\n                ...state,\r\n                isLoading: true\r\n            }\r\n\r\n        case USER_LOADED: //once the user is loaded , this USER_LOADED is gonna run basically all the time with every req. to see if we're logged in or not !!!!!!!\r\n            //inajém iétna7a él token so lézém dima we check if we're logged in or not\r\n            return {\r\n                ...state,\r\n                isAuthenticated: true, //we were validate it on the back end and we got the user\r\n                isLoading: false,\r\n                user: action.payload //we will send the user as the payload\r\n            };\r\n\r\n        case LOGIN_SUCCESS: //bél nesba lél LOGIN_SUCCESS && REGISTER_SUCCESS we will do the same thing\r\n        case REGISTER_SUCCESS:\r\n            localStorage.setItem('token', action.payload.token);\r\n            return {\r\n                ...state,\r\n                ...action.payload, //this is what we're sneding from the backend an object wich contains the user éli houa object and the token\r\n                isAuthenticated: true, //we were validate it on the back end and we got the user\r\n                isLoading: false\r\n            };\r\n\r\n        case AUTH_ERROR:\r\n        case LOGIN_FAIL:\r\n        case LOGOUT_SUCCESS:\r\n        case REGISTER_FAIL:\r\n            localStorage.removeItem('token'); //ina7i él token mél local storage\r\n            return {\r\n                ...state,\r\n                token: null, //setting the state\r\n                user: null,\r\n                isAuthenticated: false,\r\n                isLoading: false\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}