{"ast":null,"code":"//For communicating with the back-end \n//1-import axios\nimport axios from'axios';import{GET_ITEMS,ADD_ITEM,DELETE_ITEM,ITEMS_LOADING}from'./types';//2-add the dispatch with this syntax (this is where thunk comes in to make async. req)\n//we will use the dispatch to send the type along with the data that we get from our req.\nexport var getItems=function getItems(){return function(dispatch){//3-we call the setItemLoading() to set the value of loading to true \n//ya3ni 9a3ed njib fi data from an api\n//we will call dispatch and pass to it any of our actions\ndispatch(setItemsLoading());//4-then we wanna make our req to the back-end\naxios.get('/api/items')//that call will return a promise\n.then(function(res){//houni kél data jétna from our server\ndispatch({//houni dispatch will take an object fih el type of the actions + a payload fih él data éli jébnéha mél server\ntype:GET_ITEMS,payload:res.data});});//5-go to the reducer and make look at the code\n};};export var deleteItem=function deleteItem(id){return function(dispatch){axios.delete(\"/api/items/\".concat(id)).then(function(res){return dispatch({type:DELETE_ITEM,payload:id});});//we take care from deleting the post from the DB and the UI by sending an action to the reducer\n};};export var addItem=function addItem(item){return function(dispatch){axios.post('/api/items',item)//we are making a post req. so we are passing some data\n.then(function(res){return dispatch({type:ADD_ITEM,payload:res.data//we are sending to the reducer the new item that was inserted in the DB\n});});};};export var setItemsLoading=function setItemsLoading(){return{type:ITEMS_LOADING};};","map":{"version":3,"sources":["D:/Learn_the_MERN_Stack/mern_shopping_list/client/src/actions/itemActions.js"],"names":["axios","GET_ITEMS","ADD_ITEM","DELETE_ITEM","ITEMS_LOADING","getItems","dispatch","setItemsLoading","get","then","res","type","payload","data","deleteItem","id","delete","addItem","item","post"],"mappings":"AAAA;AACA;AACA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,SAAT,CAAoBC,QAApB,CAA8BC,WAA9B,CAA2CC,aAA3C,KAAgE,SAAhE,CAEA;AACA;AACA,MAAO,IAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,SAAM,UAAAC,QAAQ,CAAI,CACtC;AACA;AACA;AACAA,QAAQ,CAACC,eAAe,EAAhB,CAAR,CAEA;AACAP,KAAK,CAACQ,GAAN,CAAU,YAAV,CAAwB;AAAxB,CACKC,IADL,CACU,SAAAC,GAAG,CAAI,CACT;AACAJ,QAAQ,CAAC,CAAE;AACPK,IAAI,CAAEV,SADD,CAELW,OAAO,CAAEF,GAAG,CAACG,IAFR,CAAD,CAAR,CAIH,CAPL,EAQI;AAEP,CAjBuB,EAAjB,CAmBP,MAAO,IAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,EAAD,QAAQ,UAAAT,QAAQ,CAAI,CAC1CN,KAAK,CAACgB,MAAN,sBAA2BD,EAA3B,GACKN,IADL,CACU,SAAAC,GAAG,QAAIJ,CAAAA,QAAQ,CAAC,CAClBK,IAAI,CAAER,WADY,CAElBS,OAAO,CAAEG,EAFS,CAAD,CAAZ,EADb,EAKI;AACP,CAPyB,EAAnB,CASP,MAAO,IAAME,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,IAAD,QAAU,UAAAZ,QAAQ,CAAI,CACzCN,KAAK,CAACmB,IAAN,CAAW,YAAX,CAAyBD,IAAzB,CAA+B;AAA/B,CACKT,IADL,CACU,SAAAC,GAAG,QAAIJ,CAAAA,QAAQ,CAAC,CAClBK,IAAI,CAAET,QADY,CAElBU,OAAO,CAAEF,GAAG,CAACG,IAAK;AAFA,CAAD,CAAZ,EADb,EAKH,CANsB,EAAhB,CAQP,MAAO,IAAMN,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,EAAM,CACjC,MAAO,CACHI,IAAI,CAAEP,aADH,CAAP,CAGH,CAJM","sourcesContent":["//For communicating with the back-end \r\n//1-import axios\r\nimport axios from 'axios';\r\nimport { GET_ITEMS, ADD_ITEM, DELETE_ITEM, ITEMS_LOADING } from './types';\r\n\r\n//2-add the dispatch with this syntax (this is where thunk comes in to make async. req)\r\n//we will use the dispatch to send the type along with the data that we get from our req.\r\nexport const getItems = () => dispatch => {\r\n    //3-we call the setItemLoading() to set the value of loading to true \r\n    //ya3ni 9a3ed njib fi data from an api\r\n    //we will call dispatch and pass to it any of our actions\r\n    dispatch(setItemsLoading());\r\n\r\n    //4-then we wanna make our req to the back-end\r\n    axios.get('/api/items') //that call will return a promise\r\n        .then(res => {\r\n            //houni kél data jétna from our server\r\n            dispatch({ //houni dispatch will take an object fih el type of the actions + a payload fih él data éli jébnéha mél server\r\n                type: GET_ITEMS,\r\n                payload: res.data\r\n            }) \r\n        })\r\n        //5-go to the reducer and make look at the code\r\n\r\n};\r\n\r\nexport const deleteItem = (id) => dispatch => {\r\n    axios.delete(`/api/items/${id}`)\r\n        .then(res => dispatch({\r\n            type: DELETE_ITEM,\r\n            payload: id\r\n        }))\r\n        //we take care from deleting the post from the DB and the UI by sending an action to the reducer\r\n};\r\n\r\nexport const addItem = (item) => dispatch => {\r\n    axios.post('/api/items', item) //we are making a post req. so we are passing some data\r\n        .then(res => dispatch({\r\n            type: ADD_ITEM,\r\n            payload: res.data //we are sending to the reducer the new item that was inserted in the DB\r\n        }))\r\n};\r\n\r\nexport const setItemsLoading = () => {\r\n    return {\r\n        type: ITEMS_LOADING\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}