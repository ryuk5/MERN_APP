{"ast":null,"code":"//1-importing axios\nimport axios from 'axios'; //9-importing the fn. that will handle our errors\n\nimport { returnErrors } from './errorActions'; //2-importing the types need it\n\nimport { USER_LOADING, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS, REGISTER_SUCCESS, REGISTER_FAIL } from './types'; //3-Check token & load user\n\n/** madémna bch nésta3mlolu an async. call lézém nesta3méll él dispatch  \r\n *  I want to be able to get parts of the state méllé5er 7achti bél token éli houa mawjoud él state\r\n *  along with dispatch bch n3adi une fn. esmha getState té5ouli él attr. éli 7achti bih mél state\r\n *  don't forget to wrap dispatch 1st param and getState 2sec param in parentheses\r\n */\n\nexport const loadUser = () => (dispatch, getState) => {\n  //fn. body\n  //4-dispatch user loading 5ater bch njibou mél DB\n  //User loading\n  dispatch({\n    type: USER_LOADING\n  }); //we wanna do that b4 anything\n  //8-fetching the user\n\n  axios.get('/api/auth/user', config) //zédna 3adina él headers éli zédnéhom lél req\n  .then(res => dispatch({\n    type: USER_LOADED,\n    payload: res.data //this object contains the user object +token éli nraj3ou fih mél server\n\n  })) //if there is an issue\n  .catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n}; //Setup config/headers and token\n\nexport const tokenConfig = getState => {\n  //5-Getting the token from local storage\n  const token = getState().auth.token; // !!! esta3malt la fn. getState().name_of_reducer.attr !!!\n  //6-Adding headers to my req. using axios\n\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }; //7-verify if the toekn exists we will add it to the headers\n\n  if (token) {\n    config.headers['x-auth-token'] = token;\n    /** ya3ni éna 3andi token fél localStorage 7atinéh fél state\r\n        * zédna 7atina él token éli jébnéh mél localStorage\r\n          fél headers bta3 él req éli bch tétb3ath lél server*/\n  }\n};","map":{"version":3,"sources":["D:/Learn_the_MERN_Stack/mern_shopping_list/client/src/actions/authActions.js"],"names":["axios","returnErrors","USER_LOADING","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","REGISTER_SUCCESS","REGISTER_FAIL","loadUser","dispatch","getState","type","get","config","then","res","payload","data","catch","err","response","status","tokenConfig","token","auth","headers"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,SAASC,YAAT,QAA6B,gBAA7B,C,CAEA;;AACA,SACIC,YADJ,EAEIC,WAFJ,EAGIC,UAHJ,EAIIC,aAJJ,EAKIC,UALJ,EAMIC,cANJ,EAOIC,gBAPJ,EAQIC,aARJ,QASO,SATP,C,CAWA;;AAEA;;;;;;AAKA,OAAO,MAAMC,QAAQ,GAAG,MAAM,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAClD;AAEA;AACA;AACAD,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAEX;AAAR,GAAD,CAAR,CALkD,CAKhB;AAIlC;;AACAF,EAAAA,KAAK,CAACc,GAAN,CAAU,gBAAV,EAA4BC,MAA5B,EAAoC;AAApC,GACKC,IADL,CACUC,GAAG,IAAIN,QAAQ,CAAC;AAClBE,IAAAA,IAAI,EAAEV,WADY;AAElBe,IAAAA,OAAO,EAAED,GAAG,CAACE,IAFK,CAEA;;AAFA,GAAD,CADzB,EAKI;AALJ,GAMKC,KANL,CAMWC,GAAG,IAAI;AACVV,IAAAA,QAAQ,CAACV,YAAY,CAACoB,GAAG,CAACC,QAAJ,CAAaH,IAAd,EAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,CAAb,CAAR;AACAZ,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAET;AADD,KAAD,CAAR;AAGH,GAXL;AAYH,CAtBM,C,CAwBP;;AACA,OAAO,MAAMoB,WAAW,GAAGZ,QAAQ,IAAI;AACnC;AACA,QAAMa,KAAK,GAAGb,QAAQ,GAAGc,IAAX,CAAgBD,KAA9B,CAFmC,CAEE;AAErC;;AACA,QAAMV,MAAM,GAAG;AACXY,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AADE,GAAf,CALmC,CAWnC;;AACA,MAAIF,KAAJ,EAAW;AACPV,IAAAA,MAAM,CAACY,OAAP,CAAe,cAAf,IAAiCF,KAAjC;AAAwC;;;AAG3C;AACJ,CAjBM","sourcesContent":["//1-importing axios\r\nimport axios from 'axios';\r\n\r\n//9-importing the fn. that will handle our errors\r\nimport { returnErrors } from './errorActions';\r\n\r\n//2-importing the types need it\r\nimport {\r\n    USER_LOADING,\r\n    USER_LOADED,\r\n    AUTH_ERROR,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGOUT_SUCCESS,\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FAIL\r\n} from './types';\r\n\r\n//3-Check token & load user\r\n\r\n/** madémna bch nésta3mlolu an async. call lézém nesta3méll él dispatch  \r\n *  I want to be able to get parts of the state méllé5er 7achti bél token éli houa mawjoud él state\r\n *  along with dispatch bch n3adi une fn. esmha getState té5ouli él attr. éli 7achti bih mél state\r\n *  don't forget to wrap dispatch 1st param and getState 2sec param in parentheses\r\n */\r\nexport const loadUser = () => (dispatch, getState) => {\r\n    //fn. body\r\n\r\n    //4-dispatch user loading 5ater bch njibou mél DB\r\n    //User loading\r\n    dispatch({ type: USER_LOADING }); //we wanna do that b4 anything\r\n\r\n\r\n\r\n    //8-fetching the user\r\n    axios.get('/api/auth/user', config) //zédna 3adina él headers éli zédnéhom lél req\r\n        .then(res => dispatch({\r\n            type: USER_LOADED,\r\n            payload: res.data //this object contains the user object +token éli nraj3ou fih mél server\r\n        }))\r\n        //if there is an issue\r\n        .catch(err => {\r\n            dispatch(returnErrors(err.response.data, err.response.status));\r\n            dispatch({\r\n                type: AUTH_ERROR\r\n            });\r\n        });\r\n};\r\n\r\n//Setup config/headers and token\r\nexport const tokenConfig = getState => {\r\n    //5-Getting the token from local storage\r\n    const token = getState().auth.token; // !!! esta3malt la fn. getState().name_of_reducer.attr !!!\r\n\r\n    //6-Adding headers to my req. using axios\r\n    const config = {\r\n        headers: {\r\n            \"Content-type\": \"application/json\"\r\n        }\r\n    }\r\n\r\n    //7-verify if the toekn exists we will add it to the headers\r\n    if (token) {\r\n        config.headers['x-auth-token'] = token; /** ya3ni éna 3andi token fél localStorage 7atinéh fél state\r\n                                                    * zédna 7atina él token éli jébnéh mél localStorage\r\n                                                      fél headers bta3 él req éli bch tétb3ath lél server*/\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}