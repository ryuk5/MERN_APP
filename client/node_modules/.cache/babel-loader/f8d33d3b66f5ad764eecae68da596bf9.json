{"ast":null,"code":"var _jsxFileName = \"D:\\\\Learn_the_MERN_Stack\\\\mern_shopping_list\\\\client\\\\src\\\\components\\\\auth\\\\RegisterModal.js\";\nimport React, { Component } from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, Form, FormGroup, Label, Input, NavLink } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { register } from '../../actions/authActions';\n\nclass RegisterModal extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      modal: false,\n      name: '',\n      email: '',\n      password: '',\n      msg: null // I wanna be able to show msg if we have an error\n\n    };\n\n    this.toggle = () => {\n      this.setState({\n        modal: !this.state.modal\n      });\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault(); //Deconstructring\n\n      const {\n        name,\n        email,\n        password\n      } = this.state; //Creating a user object\n\n      const newUser = {\n        name,\n        email,\n        password\n      }; //calling the register action Attempt to register\n\n      this.props.register(newUser); // Close Modal\n      //We wanna close the modal if everything is ok \n      //we don't wanna close the modal if there's an error i wanna display the error to the user\n    };\n  }\n\n  componentDidUpdate(prevProps) {}\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(NavLink, {\n      onClick: this.toggle,\n      href: \"#\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }\n    }, \"Register\"), /*#__PURE__*/React.createElement(Modal, {\n      isOpen: this.state.modal,\n      toggle: this.toggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ModalHeader, {\n      toggle: this.toggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }\n    }, \"Register\"), /*#__PURE__*/React.createElement(ModalBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      for: \"name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 33\n      }\n    }, \"Name\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"text\",\n      name: \"name\",\n      id: \"name\",\n      placeholder: \"Name\",\n      className: \"mb-3\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(Label, {\n      for: \"email\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 33\n      }\n    }, \"Email\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"email\",\n      name: \"email\",\n      id: \"email\",\n      placeholder: \"Email\",\n      className: \"mb-3\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(Label, {\n      for: \"password\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 33\n      }\n    }, \"Password\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"password\",\n      name: \"password\",\n      id: \"password\",\n      placeholder: \"Password\",\n      className: \"mb-3\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      color: \"dark\",\n      style: {\n        marginTop: '2rem'\n      },\n      block: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 33\n      }\n    }, \"Register\"))))));\n  }\n\n}\n\nRegisterModal.propTypes = {\n  isAuthenticated: PropTypes.bool,\n  //we are not going to do required bcz could be null\n  error: PropTypes.object.isRequired,\n  register: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => {\n  return {\n    isAuthenticated: state.auth.isAuthenticated,\n    //W need to bring the value of isAuthenticated because we want to close the modal once we register we want to close it if we're authenticated\n    error: state.error\n  };\n};\n\nexport default connect(mapStateToProps, {\n  register\n})(RegisterModal);","map":{"version":3,"sources":["D:/Learn_the_MERN_Stack/mern_shopping_list/client/src/components/auth/RegisterModal.js"],"names":["React","Component","Button","Modal","ModalHeader","ModalBody","Form","FormGroup","Label","Input","NavLink","connect","PropTypes","register","RegisterModal","state","modal","name","email","password","msg","toggle","setState","handleChange","e","target","value","handleSubmit","preventDefault","newUser","props","componentDidUpdate","prevProps","render","marginTop","propTypes","isAuthenticated","bool","error","object","isRequired","func","mapStateToProps","auth"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    Form,\r\n    FormGroup,\r\n    Label,\r\n    Input,\r\n    NavLink\r\n} from 'reactstrap';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { register } from '../../actions/authActions';\r\n\r\nclass RegisterModal extends Component {\r\n    state = {\r\n        modal: false,\r\n        name: '',\r\n        email: '',\r\n        password: '',\r\n        msg: null // I wanna be able to show msg if we have an error\r\n    }\r\n\r\n    static propTypes = {\r\n        isAuthenticated: PropTypes.bool, //we are not going to do required bcz could be null\r\n        error: PropTypes.object.isRequired,\r\n        register: PropTypes.func.isRequired\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        \r\n    }\r\n\r\n    toggle = () => {\r\n        this.setState({ modal: !this.state.modal });\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        \r\n        //Deconstructring\r\n        const { name, email , password } = this.state;\r\n\r\n        //Creating a user object\r\n        const newUser = {\r\n            name,\r\n            email,\r\n            password\r\n        };\r\n        \r\n        //calling the register action Attempt to register\r\n        this.props.register(newUser);\r\n        \r\n        // Close Modal\r\n        //We wanna close the modal if everything is ok \r\n        //we don't wanna close the modal if there's an error i wanna display the error to the user\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <NavLink onClick={this.toggle} href=\"#\">Register</NavLink>\r\n                    \r\n                <Modal\r\n                    isOpen={this.state.modal}\r\n                    toggle={this.toggle}\r\n                >\r\n\r\n                    <ModalHeader toggle={this.toggle}>\r\n                        Register\r\n                    </ModalHeader>\r\n\r\n                    <ModalBody>\r\n                        <Form onSubmit={this.handleSubmit}>\r\n                            <FormGroup>\r\n                                <Label for=\"name\">Name</Label>\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    name=\"name\"\r\n                                    id=\"name\"\r\n                                    placeholder=\"Name\"\r\n                                    className=\"mb-3\"\r\n                                    onChange={this.handleChange}\r\n                                />\r\n                                \r\n\r\n                                <Label for=\"email\">Email</Label>\r\n                                <Input\r\n                                    type=\"email\"\r\n                                    name=\"email\"\r\n                                    id=\"email\"\r\n                                    placeholder=\"Email\"\r\n                                    className=\"mb-3\"\r\n                                    onChange={this.handleChange}\r\n                                />\r\n                                \r\n\r\n                                <Label for=\"password\">Password</Label>\r\n                                <Input\r\n                                    type=\"password\"\r\n                                    name=\"password\"\r\n                                    id=\"password\"\r\n                                    placeholder=\"Password\"\r\n                                    className=\"mb-3\"\r\n                                    onChange={this.handleChange}\r\n                                />\r\n                                <Button\r\n                                    color=\"dark\"\r\n                                    style={{marginTop: '2rem'}}\r\n                                    block\r\n                                >\r\n                                Register\r\n                                </Button>\r\n                            </FormGroup>\r\n                        </Form>\r\n                    </ModalBody>\r\n\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isAuthenticated: state.auth.isAuthenticated, //W need to bring the value of isAuthenticated because we want to close the modal once we register we want to close it if we're authenticated\r\n        error: state.error\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { register })(RegisterModal);"]},"metadata":{},"sourceType":"module"}